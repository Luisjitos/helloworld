pipeline {
    agent any
    stages {
        stage('Get Code') {
            steps {
                bat 'whoami'
                bat 'hostname'
                git branch: 'master', url: 'https://github.com/Luisjitos/helloworld'
                stash includes: "*", name: "code stash"
            }
        }
        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat 'whoami'
                    bat 'hostname'
                    unstash "code stash"
                    bat '''
                        set PYTHONPATH=%WORKSPACE%
                        C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\pytest --junitxml=result-unit.xml test\\unit
                    '''
                    stash includes: "*", name: "result-unit stash"
                    junit 'result*.xml'
                }
            }
        }
        stage('Rest') {
            steps {
                bat '''
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    start cmd /c "flask run &"
                    ping 127.0.0.1 -n 10
                    start cmd /c "java -jar C:\\Users\\JoseLuis\\Downloads\\wiremock-standalone-3.3.1.jar --port 9090 --root-dir C:\\Users\\JoseLuis\\Downloads"
                    set PYTHONPATH=%WORKSPACE%
                    C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\pytest --junitxml=result-unit.xml test\\unit
                '''
            }
        }
        stage('Static') {
            steps {
                bat '''
                    "C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\flake8" --exit-zero --format=pylint app > flake8.out
                '''
                recordIssues(
                    tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],
                    qualityGates: [
                        [threshold: 15, type: 'TOTAL', unstable: true],
                        [threshold: 17, type: 'TOTAL', unstable: false]
                    ]
                )
            }
        }
        stage('Security') {
            steps {
                bat '''
                   "C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\bandit" --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                recordIssues(
                    tools: [bandit(name: 'Bandit', pattern: 'bandit.out')],
                    qualityGates: [
                        [threshold: 1, type: 'TOTAL', unstable: true],
                        [threshold: 2, type: 'TOTAL', unstable: false]
                    ]
                )
            }
        }
        stage('Performance') {
            steps {
                bat 'C:\\apache-jmeter-5.6.2\\apache-jmeter-5.6.2\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l falsk.jtl'
                recordIssues(
                    tools: [pylint(name: 'bandit', pattern: 'bandit.out')],
                    qualityGates: [
                        [threshold: 1, type: 'TOTAL', unstable: true],
                        [threshold: 1, type: 'TOTAL', unstable: true]
                    ]
                )
            }
        }
        stage('Coverage') {
            steps {
                bat '''
                    coverage run --branch --source=app --omit=app\\_init_.py,app\\api.py -m pytest test\\unit
                    coverage xml
                '''
                cobertura(
                    coberturaReportFile: 'coverage.xml', 
                    conditionalCoverageTargets: '100,80,95', 
                    failUnstable: false
                )
            }
        }
    }
}
