pipeline {
    agent any // Se ejecutarÃ¡ en cualquier agente disponible

    stages {
        stage('Get Code') {
            steps {
                bat 'whoami'
                bat 'hostname'
                git branch: 'master', url: 'https://github.com/Luisjitos/helloworld'
            }
        }

        stage('Unit') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat 'whoami'
                    bat 'hostname'
                    bat '''
                        set PYTHONPATH=%WORKSPACE%
                        C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\pytest --junitxml=result-unit.xml test\\unit
                    '''
                    junit 'result*.xml'
                }
            }
        }

        stage('Rest') {
            steps {
                bat '''
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    start cmd /c "flask run &"
                    ping 127.0.0.1 -n 10
                    start cmd /c "java -jar C:\\Users\\JoseLuis\\Downloads\\wiremock-standalone-3.3.1.jar --port 9090 --root-dir C:\\Users\\JoseLuis\\Downloads"
                    set PYTHONPATH=%WORKSPACE%
                    C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\pytest --junitxml=result-unit.xml test\\unit
                '''
            }
        }

        stage('Static') {
            steps {
                bat '''
                    "C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\flake8" --exit-zero --format=pylint app > flake8.out
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true, failure: true], [threshold: 10, type: 'TOTAL', unstable: false, failure: true]], ignoreQualityGate: true
            }
        }

        stage('Coverage') {
            steps {
                bat '''
                    "C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\coverage" run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                    coverage.xml
                '''
                coberturaReport file:'coverage.xml', conditionalCoverageTargets: '100,83,90', lineCoverageTargets: '100,90,70', failUnstable: false
            }
        }

        stage('Security') {
            steps {
                bat '''
                    "C:\\Users\\JoseLuis\\AppData\\Local\\Programs\\Python\\Python312\\Scripts\\bandit" --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template '{abspath}:{line}: [{test_id}], {msg}' 
                '''
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
            }
        }

        stage('Performance') {
            steps {
                script {
                    bat 'SET FLASK_APP=app\\api.py && start /B cmd /c "flask run"'
                    bat 'ping 127.0.0.1 -n 10 > nul'
                    bat '''
                        "C:\\apache-jmeter-5.6.2\\apache-jmeter-5.6.2\\bin\\jmeter" -n -t C:\\CP1B\\test\\helloworld\\test\\test1\\test.jmx -f -l flask.jtl
                    '''
                    perfReport sourceDataFiles:'flask.jtl'
                }
            }
        }
    }
}
